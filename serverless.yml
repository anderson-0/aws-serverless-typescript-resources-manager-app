service: resource-management-app

frameworkVersion: "3"

useDotenv: true

plugins:
  - serverless-offline
  - serverless-webpack
  - serverless-webpack-prisma

custom:
  webpack:
    webpackConfig: webpack.config.js
    includeModules: true
    packager: npm
  serverless-offline:
    apiKey: ${env:api_key}
    useChildProcesses: true

provider:
  name: aws
  runtime: nodejs14.x
  region: us-east-1
  versionFunctions: false
  stage: ${opt:stage, 'dev'}
  environment:
    stage: ${opt:stage, 'dev'}
    DATABASE_URL: ${env:DATABASE_URL}
  apiGateway:
    apiKeys:
      - name: ${self:service}-${opt:stage, 'dev'}-api-key
functions:
  auth:
    handler: src/auth.handler
    events:
      - http:
          path: auth
          method: post
          cors: true
  listResources:
    handler: src/resources/list.handler
    events:
      - http:
          path: resources
          method: get
          cors: true
  createResource:
    handler: src/resources/create.handler
    events:
      - http:
          path: resources
          method: post
          cors: true
  getResource:
    handler: src/resources/get.handler
    events:
      - http:
          path: resources/{id}
          method: get
          cors: true
  updateResource:
    handler: src/resources/update.handler
    events:
      - http:
          path: resources/{id}
          method: put
          cors: true
  cronUpdateResource:
    handler: src/resources/cronUpdate.handler
    events:
      - schedule: rate(1 minute)
  deleteResource:
    handler: src/resources/delete.handler
    events:
      - http:
          path: resources/{id}
          method: delete
          cors: true
  createServer:
    handler: src/servers/create.handler
    events:
      - http:
          path: servers
          method: post
          cors: true
          private: true
  listServers:
    handler: src/servers/list.handler
    events:
      - http:
          path: servers
          method: get
          cors: true
          private: true
  getServer:
    handler: src/servers/get.handler
    events:
      - http:
          path: servers/{id}
          method: get
          cors: true
          private: true
  updateServer:
    handler: src/servers/update.handler
    events:
      - http:
          path: servers/{id}
          method: put
          cors: true
          private: true
  deleteServer:
    handler: src/servers/delete.handler
    events:
      - http:
          path: servers/{id}
          method: delete
          cors: true
          private: true
package:
# include:
# - prisma/schema.prisma
# individually: true
patterns:
  #   # - '!node_modules/.prisma/client/libquery_engine-*'
  #   # - 'node_modules/.prisma/client/libquery_engine-rhel-*'
  #   - "!node_modules/prisma/libquery_engine-*"
  #   - "!node_modules/@prisma/engines/**"
  - "!node_modules/.prisma/client/libquery_engine-*"
  - "node_modules/.prisma/client/libquery_engine-rhel-*"
  - "!node_modules/prisma/libquery_engine-*"
  - "!node_modules/@prisma/engines/**"

  # EXCLUDE query_engine-windows.dll.node
  - "!node_modules/.prisma/client/query_engine-*"
  # EXCLUDE .cache folder
  - "!node_modules/.cache/**"
  # EXCLUDE .bin folder
  - "!node_modules/.bin/**"
